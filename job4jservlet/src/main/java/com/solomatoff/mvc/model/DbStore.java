package com.solomatoff.mvc.model;

import com.solomatoff.mvc.controller.Controller;
import com.solomatoff.mvc.controller.LoggerUtil;
import com.solomatoff.mvc.entities.User;
import org.apache.commons.dbcp2.BasicDataSource;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DbStore implements ModelStore {
    private static BasicDataSource dataSource = null;
    private static final String SCHEMA_NAME = "solomatov";

    public DbStore() {
        initDataSource();
    }

    private static void initDataSource() {
        if (dataSource == null) {
            BasicDataSource ds = new BasicDataSource();
            ds.setDriverClassName("org.postgresql.Driver");
            ds.setUrl("jdbc:postgresql://localhost:5432/db_solomatov");
            ds.setUsername("solomatov");
            ds.setPassword("123");
            ds.setMinIdle(5);
            ds.setMaxIdle(10);
            ds.setMaxOpenPreparedStatements(100);
            dataSource = ds;
            // Если таблица users не существует, то создать ее
            try (Connection connection = dataSource.getConnection();
                 Statement st = connection.createStatement()) {
                st.execute("CREATE TABLE IF NOT EXISTS solomatov.users(id serial PRIMARY KEY, name character varying, login character varying, email character varying, createDate timestamp without time zone)");
                st.execute(String.format("GRANT ALL ON TABLE %s.users TO public", SCHEMA_NAME));
            } catch (SQLException e) {
                Controller.getInstance().getLog().error("(getDataSourse) Сan not create table 'users'", e);
            }
        }
    }

    /**
     *  Метод добавляет user в таблицу users
     * @param user добавляемый пользователь
     * @return список List<User>, состоящий из добавленного user
     */
    @Override
    public List<User> add(User user) {
        List<User> result = new ArrayList<>();
        try (Connection connection = dataSource.getConnection()) {
            PreparedStatement st;
            if (user.getId() == null) {
                st = connection.prepareStatement(String.format("INSERT INTO %s.users(name, login, email, createDate) VALUES (?, ?, ?, ?)", SCHEMA_NAME));
                st.setString(1, user.getName());
                st.setString(2, user.getLogin());
                st.setString(3, user.getEmail());
                st.setTimestamp(4, user.getCreateDate());
            } else {
                st = connection.prepareStatement(String.format("INSERT INTO %s.users(id, name, login, email, createDate) VALUES (?, ?, ?, ?, ?)", SCHEMA_NAME));
                st.setInt(1, user.getId());
                st.setString(2, user.getName());
                st.setString(3, user.getLogin());
                st.setString(4, user.getEmail());
                st.setTimestamp(5, user.getCreateDate());
            }
            try {
                st.executeUpdate();
                ResultSet autoGenerated = st.getGeneratedKeys();
                Integer newUserId;
                if (autoGenerated.next()) {
                    newUserId = autoGenerated.getInt(1);
                } else {
                    newUserId = user.getId();
                }
                result.add(user);
                // Записываем в LOG
                Controller.getInstance().getLog().info(String.format("    Add User: <%4d> <%s> <%s> <%s>", newUserId, user.getName(), user.getLogin(), user.getEmail()));
            } catch (SQLException e) {
                result.add(null);
                Controller.getInstance().getLog().error(String.format("(ADD) An error occurred while adding user with id = %4d", user.getId()), e);
            }
            st.close();
        } catch (SQLException e) {
            result.add(null);
            Controller.getInstance().getLog().error(String.format("(ADD) An error occurred while adding user with id = %4d", user.getId()), e);
        }
        return result;
    }

    @Override
    public List<User> update(User user) {
        List<User> result = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(String.format("UPDATE %s.users SET name=?, login=?, email=?, createDate=? WHERE id=?", SCHEMA_NAME))) {
            st.setString(1, user.getName());
            st.setString(2, user.getLogin());
            st.setString(3, user.getEmail());
            st.setTimestamp(4, user.getCreateDate());
            st.setInt(5, user.getId());
            int recInsert = st.executeUpdate();
            if (recInsert == 1) {
                result.add(user); // MemoryStore возвращает предыдущее значение, здесь новое
                // Записываем в LOG
                Controller.getInstance().getLog().info(String.format("    Update User: <%4d> <%s> <%s> <%s>", user.getId(), user.getName(), user.getLogin(), user.getEmail()));
            }
        } catch (SQLException e) {
            Controller.getInstance().getLog().error(String.format("(UPDATE) An error occurred while updating user with id = %4d", user.getId()), e);
        }
        return result;
    }

    @Override
    public List<User> delete(User user) {
        List<User> result = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(String.format("DELETE FROM %s.users WHERE id=?", SCHEMA_NAME))) {
            st.setInt(1, user.getId());
            int recInsert = st.executeUpdate();
            if (recInsert == 1) {
                result.add(user);
                // Записываем в LOG
                Controller.getInstance().getLog().info(String.format("    Delete User: <%4d> <%s> <%s> <%s>", user.getId(), user.getName(), user.getLogin(), user.getEmail()));
            } else {
                result.add(null);
            }
        } catch (SQLException e) {
            Controller.getInstance().getLog().error(String.format("(UPDATE) An error occurred while updating user with id = %4d", user.getId()), e);
        }
        return result;
    }

    @Override
    public List<User> findById(User user) {
        List<User> result = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             Statement st = connection.createStatement();
             ResultSet rs = st.executeQuery(String.format("SELECT * FROM %s.users WHERE id=%d", SCHEMA_NAME, user.getId()))) {
            if (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String login = rs.getString(3);
                String email = rs.getString(4);
                Timestamp createDate = rs.getTimestamp(5);
                user = new User(id, name, login, email, createDate);
                result.add(user);
                // Записываем в LOG
                Controller.getInstance().getLog().info(String.format("    Find User: <%4d> <%s> <%s> <%s>", user.getId(), user.getName(), user.getLogin(), user.getEmail()));
            } else {
                result.add(null);
            }
        } catch (SQLException e) {
            Controller.getInstance().getLog().error(String.format("(findById) An error occurred while adding user with id = %4d", user.getId()), e);
        }
        return result;
    }

    @Override
    public List<User> findAll(User user) {
        List<User> result = new ArrayList<>();
        try (Connection connection = dataSource.getConnection();
             Statement st = connection.createStatement();
             ResultSet rs = st.executeQuery(String.format("SELECT * FROM %s.users ORDER BY id", SCHEMA_NAME))) {
             while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String login = rs.getString(3);
                String email = rs.getString(4);
                Timestamp createDate = rs.getTimestamp(5);
                user = new User(id, name, login, email, createDate);
                result.add(user);
             }
        } catch (SQLException e) {
            Controller.getInstance().getLog().error("(findAll) An error occurred while find all users", e);
        }
        // Записываем в LOG
        Controller.getInstance().getLog().info("  Find All Users:");
        new LoggerUtil().saveUsersToLog(result, Controller.getInstance().getLog());
        return result;
    }
}
